// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.28.3
// source: proto/key_exchange_service.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Статус обмена ключами
type KeyExchangeStatus int32

const (
	KeyExchangeStatus_NOT_STARTED KeyExchangeStatus = 0 // Обмен ключами не начат
	KeyExchangeStatus_INITIATED   KeyExchangeStatus = 1 // Инициировано пользователем 1 (отправлены g, p, A)
	KeyExchangeStatus_COMPLETED   KeyExchangeStatus = 2 // Завершено пользователем 2 (отправлено B)
	KeyExchangeStatus_FAILED      KeyExchangeStatus = 3 // Ошибка обмена ключами
)

// Enum value maps for KeyExchangeStatus.
var (
	KeyExchangeStatus_name = map[int32]string{
		0: "NOT_STARTED",
		1: "INITIATED",
		2: "COMPLETED",
		3: "FAILED",
	}
	KeyExchangeStatus_value = map[string]int32{
		"NOT_STARTED": 0,
		"INITIATED":   1,
		"COMPLETED":   2,
		"FAILED":      3,
	}
)

func (x KeyExchangeStatus) Enum() *KeyExchangeStatus {
	p := new(KeyExchangeStatus)
	*p = x
	return p
}

func (x KeyExchangeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyExchangeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_key_exchange_service_proto_enumTypes[0].Descriptor()
}

func (KeyExchangeStatus) Type() protoreflect.EnumType {
	return &file_proto_key_exchange_service_proto_enumTypes[0]
}

func (x KeyExchangeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyExchangeStatus.Descriptor instead.
func (KeyExchangeStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_key_exchange_service_proto_rawDescGZIP(), []int{0}
}

// Запрос на инициализацию обмена ключами
type InitKeyExchangeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`                      // Имя собеседника
	DhG           string                 `protobuf:"bytes,2,opt,name=dh_g,json=dhG,proto3" json:"dh_g,omitempty"`                     // Параметр g (генератор)
	DhP           string                 `protobuf:"bytes,3,opt,name=dh_p,json=dhP,proto3" json:"dh_p,omitempty"`                     // Параметр p (простое число)
	DhAPublic     string                 `protobuf:"bytes,4,opt,name=dh_a_public,json=dhAPublic,proto3" json:"dh_a_public,omitempty"` // Публичный ключ A = g^a mod p
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitKeyExchangeRequest) Reset() {
	*x = InitKeyExchangeRequest{}
	mi := &file_proto_key_exchange_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitKeyExchangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitKeyExchangeRequest) ProtoMessage() {}

func (x *InitKeyExchangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_key_exchange_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitKeyExchangeRequest.ProtoReflect.Descriptor instead.
func (*InitKeyExchangeRequest) Descriptor() ([]byte, []int) {
	return file_proto_key_exchange_service_proto_rawDescGZIP(), []int{0}
}

func (x *InitKeyExchangeRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *InitKeyExchangeRequest) GetDhG() string {
	if x != nil {
		return x.DhG
	}
	return ""
}

func (x *InitKeyExchangeRequest) GetDhP() string {
	if x != nil {
		return x.DhP
	}
	return ""
}

func (x *InitKeyExchangeRequest) GetDhAPublic() string {
	if x != nil {
		return x.DhAPublic
	}
	return ""
}

// Ответ на инициализацию обмена ключами
type InitKeyExchangeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitKeyExchangeResponse) Reset() {
	*x = InitKeyExchangeResponse{}
	mi := &file_proto_key_exchange_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitKeyExchangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitKeyExchangeResponse) ProtoMessage() {}

func (x *InitKeyExchangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_key_exchange_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitKeyExchangeResponse.ProtoReflect.Descriptor instead.
func (*InitKeyExchangeResponse) Descriptor() ([]byte, []int) {
	return file_proto_key_exchange_service_proto_rawDescGZIP(), []int{1}
}

func (x *InitKeyExchangeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InitKeyExchangeResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Запрос на завершение обмена ключами
type CompleteKeyExchangeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`                      // Имя собеседника
	DhBPublic     string                 `protobuf:"bytes,2,opt,name=dh_b_public,json=dhBPublic,proto3" json:"dh_b_public,omitempty"` // Публичный ключ B = g^b mod p
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteKeyExchangeRequest) Reset() {
	*x = CompleteKeyExchangeRequest{}
	mi := &file_proto_key_exchange_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteKeyExchangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteKeyExchangeRequest) ProtoMessage() {}

func (x *CompleteKeyExchangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_key_exchange_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteKeyExchangeRequest.ProtoReflect.Descriptor instead.
func (*CompleteKeyExchangeRequest) Descriptor() ([]byte, []int) {
	return file_proto_key_exchange_service_proto_rawDescGZIP(), []int{2}
}

func (x *CompleteKeyExchangeRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CompleteKeyExchangeRequest) GetDhBPublic() string {
	if x != nil {
		return x.DhBPublic
	}
	return ""
}

// Ответ на завершение обмена ключами
type CompleteKeyExchangeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteKeyExchangeResponse) Reset() {
	*x = CompleteKeyExchangeResponse{}
	mi := &file_proto_key_exchange_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteKeyExchangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteKeyExchangeResponse) ProtoMessage() {}

func (x *CompleteKeyExchangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_key_exchange_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteKeyExchangeResponse.ProtoReflect.Descriptor instead.
func (*CompleteKeyExchangeResponse) Descriptor() ([]byte, []int) {
	return file_proto_key_exchange_service_proto_rawDescGZIP(), []int{3}
}

func (x *CompleteKeyExchangeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CompleteKeyExchangeResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Запрос на получение параметров обмена ключами
type GetKeyExchangeParamsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"` // Имя собеседника
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKeyExchangeParamsRequest) Reset() {
	*x = GetKeyExchangeParamsRequest{}
	mi := &file_proto_key_exchange_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeyExchangeParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyExchangeParamsRequest) ProtoMessage() {}

func (x *GetKeyExchangeParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_key_exchange_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyExchangeParamsRequest.ProtoReflect.Descriptor instead.
func (*GetKeyExchangeParamsRequest) Descriptor() ([]byte, []int) {
	return file_proto_key_exchange_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetKeyExchangeParamsRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// Ответ с параметрами обмена ключами
type GetKeyExchangeParamsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Status        KeyExchangeStatus      `protobuf:"varint,2,opt,name=status,proto3,enum=messenger.KeyExchangeStatus" json:"status,omitempty"` // Статус обмена ключами
	DhG           string                 `protobuf:"bytes,3,opt,name=dh_g,json=dhG,proto3" json:"dh_g,omitempty"`                              // Параметр g (генератор)
	DhP           string                 `protobuf:"bytes,4,opt,name=dh_p,json=dhP,proto3" json:"dh_p,omitempty"`                              // Параметр p (простое число)
	DhAPublic     string                 `protobuf:"bytes,5,opt,name=dh_a_public,json=dhAPublic,proto3" json:"dh_a_public,omitempty"`          // Публичный ключ A первого пользователя
	DhBPublic     string                 `protobuf:"bytes,6,opt,name=dh_b_public,json=dhBPublic,proto3" json:"dh_b_public,omitempty"`          // Публичный ключ B второго пользователя
	ErrorMessage  string                 `protobuf:"bytes,7,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKeyExchangeParamsResponse) Reset() {
	*x = GetKeyExchangeParamsResponse{}
	mi := &file_proto_key_exchange_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeyExchangeParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyExchangeParamsResponse) ProtoMessage() {}

func (x *GetKeyExchangeParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_key_exchange_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyExchangeParamsResponse.ProtoReflect.Descriptor instead.
func (*GetKeyExchangeParamsResponse) Descriptor() ([]byte, []int) {
	return file_proto_key_exchange_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetKeyExchangeParamsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetKeyExchangeParamsResponse) GetStatus() KeyExchangeStatus {
	if x != nil {
		return x.Status
	}
	return KeyExchangeStatus_NOT_STARTED
}

func (x *GetKeyExchangeParamsResponse) GetDhG() string {
	if x != nil {
		return x.DhG
	}
	return ""
}

func (x *GetKeyExchangeParamsResponse) GetDhP() string {
	if x != nil {
		return x.DhP
	}
	return ""
}

func (x *GetKeyExchangeParamsResponse) GetDhAPublic() string {
	if x != nil {
		return x.DhAPublic
	}
	return ""
}

func (x *GetKeyExchangeParamsResponse) GetDhBPublic() string {
	if x != nil {
		return x.DhBPublic
	}
	return ""
}

func (x *GetKeyExchangeParamsResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_proto_key_exchange_service_proto protoreflect.FileDescriptor

var file_proto_key_exchange_service_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x22, 0x7a, 0x0a,
	0x16, 0x49, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x64, 0x68, 0x5f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x64, 0x68, 0x47, 0x12, 0x11, 0x0a, 0x04, 0x64, 0x68, 0x5f, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x68, 0x50, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x68, 0x5f,
	0x61, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x68, 0x41, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x58, 0x0a, 0x17, 0x49, 0x6e, 0x69,
	0x74, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x58, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0b, 0x64, 0x68, 0x5f, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x68, 0x42, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x5c, 0x0a,
	0x1b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x4b, 0x65,
	0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x04, 0x64, 0x68, 0x5f, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x68, 0x47, 0x12, 0x11, 0x0a, 0x04, 0x64, 0x68,
	0x5f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x68, 0x50, 0x12, 0x1e, 0x0a,
	0x0b, 0x64, 0x68, 0x5f, 0x61, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x68, 0x41, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1e, 0x0a,
	0x0b, 0x64, 0x68, 0x5f, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x68, 0x42, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2a, 0x4e, 0x0a, 0x11, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x32, 0xbd, 0x02, 0x0a, 0x12, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x49, 0x6e, 0x69,
	0x74, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x26, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_key_exchange_service_proto_rawDescOnce sync.Once
	file_proto_key_exchange_service_proto_rawDescData = file_proto_key_exchange_service_proto_rawDesc
)

func file_proto_key_exchange_service_proto_rawDescGZIP() []byte {
	file_proto_key_exchange_service_proto_rawDescOnce.Do(func() {
		file_proto_key_exchange_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_key_exchange_service_proto_rawDescData)
	})
	return file_proto_key_exchange_service_proto_rawDescData
}

var file_proto_key_exchange_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_key_exchange_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_key_exchange_service_proto_goTypes = []any{
	(KeyExchangeStatus)(0),               // 0: messenger.KeyExchangeStatus
	(*InitKeyExchangeRequest)(nil),       // 1: messenger.InitKeyExchangeRequest
	(*InitKeyExchangeResponse)(nil),      // 2: messenger.InitKeyExchangeResponse
	(*CompleteKeyExchangeRequest)(nil),   // 3: messenger.CompleteKeyExchangeRequest
	(*CompleteKeyExchangeResponse)(nil),  // 4: messenger.CompleteKeyExchangeResponse
	(*GetKeyExchangeParamsRequest)(nil),  // 5: messenger.GetKeyExchangeParamsRequest
	(*GetKeyExchangeParamsResponse)(nil), // 6: messenger.GetKeyExchangeParamsResponse
}
var file_proto_key_exchange_service_proto_depIdxs = []int32{
	0, // 0: messenger.GetKeyExchangeParamsResponse.status:type_name -> messenger.KeyExchangeStatus
	1, // 1: messenger.KeyExchangeService.InitKeyExchange:input_type -> messenger.InitKeyExchangeRequest
	3, // 2: messenger.KeyExchangeService.CompleteKeyExchange:input_type -> messenger.CompleteKeyExchangeRequest
	5, // 3: messenger.KeyExchangeService.GetKeyExchangeParams:input_type -> messenger.GetKeyExchangeParamsRequest
	2, // 4: messenger.KeyExchangeService.InitKeyExchange:output_type -> messenger.InitKeyExchangeResponse
	4, // 5: messenger.KeyExchangeService.CompleteKeyExchange:output_type -> messenger.CompleteKeyExchangeResponse
	6, // 6: messenger.KeyExchangeService.GetKeyExchangeParams:output_type -> messenger.GetKeyExchangeParamsResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_key_exchange_service_proto_init() }
func file_proto_key_exchange_service_proto_init() {
	if File_proto_key_exchange_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_key_exchange_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_key_exchange_service_proto_goTypes,
		DependencyIndexes: file_proto_key_exchange_service_proto_depIdxs,
		EnumInfos:         file_proto_key_exchange_service_proto_enumTypes,
		MessageInfos:      file_proto_key_exchange_service_proto_msgTypes,
	}.Build()
	File_proto_key_exchange_service_proto = out.File
	file_proto_key_exchange_service_proto_rawDesc = nil
	file_proto_key_exchange_service_proto_goTypes = nil
	file_proto_key_exchange_service_proto_depIdxs = nil
}
