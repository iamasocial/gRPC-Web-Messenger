// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/key_exchange_service.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KeyExchangeService_InitKeyExchange_FullMethodName      = "/messenger.KeyExchangeService/InitKeyExchange"
	KeyExchangeService_CompleteKeyExchange_FullMethodName  = "/messenger.KeyExchangeService/CompleteKeyExchange"
	KeyExchangeService_GetKeyExchangeParams_FullMethodName = "/messenger.KeyExchangeService/GetKeyExchangeParams"
)

// KeyExchangeServiceClient is the client API for KeyExchangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// KeyExchangeService предоставляет методы для безопасного обмена ключами
// по протоколу Диффи-Хеллмана между пользователями, где сервер выступает
// в роли посредника для хранения и передачи параметров.
type KeyExchangeServiceClient interface {
	// InitKeyExchange инициирует процесс обмена ключами.
	// Пользователь отправляет:
	// 1. Имя собеседника
	// 2. Генератор g
	// 3. Большое простое число p
	// 4. Свой публичный ключ A = g^a mod p, где a - приватный ключ пользователя
	InitKeyExchange(ctx context.Context, in *InitKeyExchangeRequest, opts ...grpc.CallOption) (*InitKeyExchangeResponse, error)
	// CompleteKeyExchange завершает обмен ключами.
	// Второй пользователь отправляет:
	// 1. Имя собеседника
	// 2. Свой публичный ключ B = g^b mod p, где b - приватный ключ второго пользователя
	CompleteKeyExchange(ctx context.Context, in *CompleteKeyExchangeRequest, opts ...grpc.CallOption) (*CompleteKeyExchangeResponse, error)
	// GetKeyExchangeParams получает параметры обмена ключами, сохраненные на сервере
	// для конкретного собеседника.
	GetKeyExchangeParams(ctx context.Context, in *GetKeyExchangeParamsRequest, opts ...grpc.CallOption) (*GetKeyExchangeParamsResponse, error)
}

type keyExchangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyExchangeServiceClient(cc grpc.ClientConnInterface) KeyExchangeServiceClient {
	return &keyExchangeServiceClient{cc}
}

func (c *keyExchangeServiceClient) InitKeyExchange(ctx context.Context, in *InitKeyExchangeRequest, opts ...grpc.CallOption) (*InitKeyExchangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitKeyExchangeResponse)
	err := c.cc.Invoke(ctx, KeyExchangeService_InitKeyExchange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyExchangeServiceClient) CompleteKeyExchange(ctx context.Context, in *CompleteKeyExchangeRequest, opts ...grpc.CallOption) (*CompleteKeyExchangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteKeyExchangeResponse)
	err := c.cc.Invoke(ctx, KeyExchangeService_CompleteKeyExchange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyExchangeServiceClient) GetKeyExchangeParams(ctx context.Context, in *GetKeyExchangeParamsRequest, opts ...grpc.CallOption) (*GetKeyExchangeParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKeyExchangeParamsResponse)
	err := c.cc.Invoke(ctx, KeyExchangeService_GetKeyExchangeParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyExchangeServiceServer is the server API for KeyExchangeService service.
// All implementations must embed UnimplementedKeyExchangeServiceServer
// for forward compatibility.
//
// KeyExchangeService предоставляет методы для безопасного обмена ключами
// по протоколу Диффи-Хеллмана между пользователями, где сервер выступает
// в роли посредника для хранения и передачи параметров.
type KeyExchangeServiceServer interface {
	// InitKeyExchange инициирует процесс обмена ключами.
	// Пользователь отправляет:
	// 1. Имя собеседника
	// 2. Генератор g
	// 3. Большое простое число p
	// 4. Свой публичный ключ A = g^a mod p, где a - приватный ключ пользователя
	InitKeyExchange(context.Context, *InitKeyExchangeRequest) (*InitKeyExchangeResponse, error)
	// CompleteKeyExchange завершает обмен ключами.
	// Второй пользователь отправляет:
	// 1. Имя собеседника
	// 2. Свой публичный ключ B = g^b mod p, где b - приватный ключ второго пользователя
	CompleteKeyExchange(context.Context, *CompleteKeyExchangeRequest) (*CompleteKeyExchangeResponse, error)
	// GetKeyExchangeParams получает параметры обмена ключами, сохраненные на сервере
	// для конкретного собеседника.
	GetKeyExchangeParams(context.Context, *GetKeyExchangeParamsRequest) (*GetKeyExchangeParamsResponse, error)
	mustEmbedUnimplementedKeyExchangeServiceServer()
}

// UnimplementedKeyExchangeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeyExchangeServiceServer struct{}

func (UnimplementedKeyExchangeServiceServer) InitKeyExchange(context.Context, *InitKeyExchangeRequest) (*InitKeyExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitKeyExchange not implemented")
}
func (UnimplementedKeyExchangeServiceServer) CompleteKeyExchange(context.Context, *CompleteKeyExchangeRequest) (*CompleteKeyExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteKeyExchange not implemented")
}
func (UnimplementedKeyExchangeServiceServer) GetKeyExchangeParams(context.Context, *GetKeyExchangeParamsRequest) (*GetKeyExchangeParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyExchangeParams not implemented")
}
func (UnimplementedKeyExchangeServiceServer) mustEmbedUnimplementedKeyExchangeServiceServer() {}
func (UnimplementedKeyExchangeServiceServer) testEmbeddedByValue()                            {}

// UnsafeKeyExchangeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyExchangeServiceServer will
// result in compilation errors.
type UnsafeKeyExchangeServiceServer interface {
	mustEmbedUnimplementedKeyExchangeServiceServer()
}

func RegisterKeyExchangeServiceServer(s grpc.ServiceRegistrar, srv KeyExchangeServiceServer) {
	// If the following call pancis, it indicates UnimplementedKeyExchangeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KeyExchangeService_ServiceDesc, srv)
}

func _KeyExchangeService_InitKeyExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitKeyExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyExchangeServiceServer).InitKeyExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyExchangeService_InitKeyExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyExchangeServiceServer).InitKeyExchange(ctx, req.(*InitKeyExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyExchangeService_CompleteKeyExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteKeyExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyExchangeServiceServer).CompleteKeyExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyExchangeService_CompleteKeyExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyExchangeServiceServer).CompleteKeyExchange(ctx, req.(*CompleteKeyExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyExchangeService_GetKeyExchangeParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyExchangeParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyExchangeServiceServer).GetKeyExchangeParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyExchangeService_GetKeyExchangeParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyExchangeServiceServer).GetKeyExchangeParams(ctx, req.(*GetKeyExchangeParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyExchangeService_ServiceDesc is the grpc.ServiceDesc for KeyExchangeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyExchangeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messenger.KeyExchangeService",
	HandlerType: (*KeyExchangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitKeyExchange",
			Handler:    _KeyExchangeService_InitKeyExchange_Handler,
		},
		{
			MethodName: "CompleteKeyExchange",
			Handler:    _KeyExchangeService_CompleteKeyExchange_Handler,
		},
		{
			MethodName: "GetKeyExchangeParams",
			Handler:    _KeyExchangeService_GetKeyExchangeParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/key_exchange_service.proto",
}
