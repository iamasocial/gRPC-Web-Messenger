import { getChats, connectToChat, startChat, chat, stopChat, createChat, sendFileMessage, deleteChat } from "../api/chat";
import { uploadFile, downloadFile } from "../api/file";
import { initKeyExchange, completeKeyExchange, getKeyExchangeParams, getDiffieHellmanParams } from "../api/key_exchange";

let currentChat = null;
let lastDisplayedDate = null;
let selectedFile = null;
let selectedUser = null;

function loadChats() {
    const chatList = document.getElementById('chat-list');
    chatList.innerHTML = '';

    getChats((err, chats) => {
        if (err) {
            console.error("Loading chats error:", err);
            alert("You are not authenticated");
            window.location.href = 'index.html';
            return;
        }

        const urlParams = new URLSearchParams(window.location.search);
        const chatParam = urlParams.get('chat');

        chats.forEach(chat => {
            const username = chat.username;
            const chatElement = document.createElement('div');
            chatElement.classList.add('chat-item');
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–∞—Ç–∞ (–¥–ª—è flexbox)
            const chatContainer = document.createElement('div');
            chatContainer.classList.add('chat-item-container');
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏
            const usernameDiv = document.createElement('div');
            usernameDiv.classList.add('username');
            usernameDiv.textContent = username;
            
            // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏
            const encryptionInfo = document.createElement('div');
            encryptionInfo.classList.add('encryption-info');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª–≥–æ—Ä–∏—Ç–º–µ
            const algorithmSpan = document.createElement('span');
            algorithmSpan.classList.add('encryption-param');
            algorithmSpan.innerHTML = `–ê–ª–≥: <strong>${chat.encryptionAlgorithm || 'n/a'}</strong>`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ
            const modeSpan = document.createElement('span');
            modeSpan.classList.add('encryption-param');
            modeSpan.innerHTML = `–†–µ–∂–∏–º: <strong>${chat.encryptionMode || 'n/a'}</strong>`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–±–∏–≤–∫–µ
            const paddingSpan = document.createElement('span');
            paddingSpan.classList.add('encryption-param');
            paddingSpan.innerHTML = `–ù–∞–±–∏–≤–∫–∞: <strong>${chat.encryptionPadding || 'n/a'}</strong>`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –±–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏
            encryptionInfo.appendChild(algorithmSpan);
            encryptionInfo.appendChild(modeSpan);
            encryptionInfo.appendChild(paddingSpan);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            chatContainer.appendChild(usernameDiv);
            chatContainer.appendChild(encryptionInfo);
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞
            const deleteButton = document.createElement('button');
            deleteButton.classList.add('delete-chat-btn');
            deleteButton.innerHTML = 'üóëÔ∏è';
            deleteButton.title = `–£–¥–∞–ª–∏—Ç—å —á–∞—Ç —Å ${username}`;
            deleteButton.dataset.username = username;
            deleteButton.addEventListener('click', handleDeleteChat);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≤ —ç–ª–µ–º–µ–Ω—Ç —á–∞—Ç–∞
            chatElement.appendChild(chatContainer);
            chatElement.appendChild(deleteButton);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            chatElement.dataset.username = username;
            chatElement.dataset.algorithm = chat.encryptionAlgorithm || '';
            chatElement.dataset.mode = chat.encryptionMode || '';
            chatElement.dataset.padding = chat.encryptionPadding || '';

            if (username === chatParam) {
                chatElement.classList.add('active');
            }

            chatList.appendChild(chatElement);
        });

        if (chatParam && chats.some(chat => chat.username === chatParam)) {
            connectToChatHandler(chatParam);
        }
    });
}

function handleIncomingMessage(message) {
    const chatMessages = document.getElementById('chat-messages');
    if (!chatMessages) return;
    
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ–ª–Ω–æ–µ):', JSON.stringify(message));
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É timestamp: —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 1000, –µ—Å–ª–∏ timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    let timestamp = message.timestamp ? parseInt(message.timestamp) : Date.now();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ timestamp —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤–º–µ—Å—Ç–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥)
    if (timestamp < 1000000000000) {
        timestamp = timestamp * 1000;
    }
    
    const messageDate = new Date(timestamp);
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ timestamp:', timestamp, '–î–∞—Ç–∞:', messageDate);
    
    // –°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    const datePart = `${messageDate.getFullYear()}-${String(messageDate.getMonth() + 1).padStart(2, '0')}-${String(messageDate.getDate()).padStart(2, '0')}`;
    const timePart = `${String(messageDate.getHours()).padStart(2, '0')}:${String(messageDate.getMinutes()).padStart(2, '0')}`;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –¥–∞—Ç—ã
    if (!document.querySelector(`.date-divider[data-date="${datePart}"]`)) {
        const dateDivider = createDateDivider(formatDate(datePart));
        dateDivider.setAttribute('data-date', datePart);
        chatMessages.appendChild(dateDivider);
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—è —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–º–µ–Ω–∏ —Å–≤–æ–π—Å—Ç–≤–∞
    const sender = message.senderUsername || message.senderusername || 
                   message.SenderUsername || message.Senderusername || '';
    
    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å selectedUser
    // –ò–Ω–∞—á–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const isFromCompanion = sender === selectedUser;
    console.log('–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:', sender, '–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', selectedUser, '–û—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:', isFromCompanion);
    
    if (isFromCompanion) {
        messageDiv.classList.add('received');
    } else {
        messageDiv.classList.add('sent');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤—ã–º –ø–æ messageType –∏–ª–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    let content = message.content || '';
    let isFileMessage = (message.messageType === 'file') || !!content.match(/\[FILE:([^:]+):([^:]+):([^\]]+)\](.*)/);
    
    if (isFileMessage) {
        // –≠—Ç–æ —Ñ–∞–π–ª–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        let fileId, fileName, fileSize, commentText;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const fileMatch = content.match(/\[FILE:([^:]+):([^:]+):([^\]]+)\](.*)/);
        if (fileMatch) {
            // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É [FILE:id:name:size]
            fileId = fileMatch[1];
            fileName = fileMatch[2];
            fileSize = parseInt(fileMatch[3]);
            commentText = fileMatch[4] || '';
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–≤–æ–π—Å—Ç–≤ —Å–æ–æ–±—â–µ–Ω–∏—è
            fileId = message.fileId;
            fileName = message.fileName || '–§–∞–π–ª';
            fileSize = message.fileSize || 0;
            commentText = content.startsWith('–§–∞–π–ª: ') ? '' : content;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        const isImage = fileName.match(/\.(jpg|jpeg|png|gif|webp|svg)$/i);
        
        if (isImage) {
            // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ —á–∞—Ç–µ
            messageDiv.setAttribute('data-file-id', fileId);
            messageDiv.classList.add('image-message');
            
            // –í—Ä–µ–º–µ–Ω–Ω—ã–π placeholder –ø–æ–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
            messageDiv.innerHTML = `
                <div class="message-content with-file">
                    ${commentText.trim() ? `<div class="message-text with-file">${escapeHtml(commentText)}</div>` : ''}
                    <div class="message-file image-loading" data-file-id="${fileId}">
                        <div class="file-loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...</div>
                    </div>
                    <div class="message-time">${timePart}</div>
                </div>
            `;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            downloadFile(fileId, (err, fileData) => {
                const fileContainer = messageDiv.querySelector('.message-file');
                
                if (err || !fileData || !fileData.url) {
                    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                    fileContainer.innerHTML = `
                        <div class="file-container error">
                            <div class="file-icon">üñºÔ∏è</div>
                            <div class="file-details">
                                <div class="file-name">${escapeHtml(fileName)}</div>
                                <div class="file-size">${formatFileSize(fileSize)}</div>
                                <div class="file-error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>
                            </div>
                        </div>
                    `;
                    return;
                }
                
                // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –µ–≥–æ —Ä–∞–∑–º–µ—Ä–æ–≤
                const preloadImg = new Image();
                preloadImg.onload = function() {
                    // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ DOM
                    const aspectRatio = this.width / this.height;
                    const isWide = aspectRatio > 1.5; // –®–∏—Ä–æ–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    const isTall = aspectRatio < 0.6; // –í—ã—Å–æ–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                    if (isWide) {
                        messageDiv.classList.add('wide-image');
                    } else if (isTall) {
                        messageDiv.classList.add('tall-image');
                    }
                    
                    // –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    fileContainer.innerHTML = `
                        <div class="image-wrapper">
                            <img src="${fileData.url}" alt="${escapeHtml(fileName)}" class="chat-image" title="${escapeHtml(fileName)}" />
                        </div>
                        <div class="image-caption">
                            <div class="file-size">${formatFileSize(fileSize)}</div>
                        </div>
                    `;
                    fileContainer.classList.remove('image-loading');
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    const img = fileContainer.querySelector('img');
                    if (img) {
                        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ç–∞–∫ –∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                        const imageWrapper = fileContainer.querySelector('.image-wrapper');
                        const clickHandler = () => {
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                            const modal = document.getElementById('file-view-modal');
                            const fileViewName = document.getElementById('file-view-name');
                            const fileViewContainer = document.getElementById('file-view-container');
                            const downloadButton = document.getElementById('download-file-button');
                            
                            if (!modal || !fileViewName || !fileViewContainer || !downloadButton) {
                                console.error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞');
                                return;
                            }
                            
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                            downloadButton.setAttribute('data-file-id', fileId);
                            downloadButton.setAttribute('data-file-url', fileData.url);
                            downloadButton.setAttribute('data-file-name', fileName);
                            
                            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                            downloadButton.onclick = function() {
                                const url = this.getAttribute('data-file-url');
                                const name = this.getAttribute('data-file-name');
                                
                                if (url && name) {
                                    // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ —ç–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫
                                    const downloadLink = document.createElement('a');
                                    downloadLink.href = url;
                                    downloadLink.download = name;
                                    document.body.appendChild(downloadLink);
                                    downloadLink.click();
                                    
                                    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                                    setTimeout(() => {
                                        document.body.removeChild(downloadLink);
                                    }, 100);
                                }
                            };
                            
                            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ
                            fileViewName.textContent = fileName;
                            fileViewContainer.innerHTML = `
                                <img src="${fileData.url}" alt="${escapeHtml(fileName)}" class="full-size-image" />
                                <div class="file-info">
                                    <div class="file-size">${formatFileSize(fileSize)}</div>
                                </div>
                            `;
                            
                            modal.style.display = 'block';
                        };
                        
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–∞–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        img.addEventListener('click', clickHandler);
                        
                        // –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –≤–µ—Å—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                        if (imageWrapper) {
                            imageWrapper.addEventListener('click', clickHandler);
                        }
                    }
                };
                
                // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                preloadImg.src = fileData.url;
            });
        } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–æ–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            messageDiv.innerHTML = `
                <div class="message-content with-file">
                    ${commentText.trim() ? `<div class="message-text with-file">${escapeHtml(commentText)}</div>` : ''}
                    <div class="message-file" data-file-id="${fileId}">
                        <div class="file-container">
                            <div class="file-icon">üìÑ</div>
                            <div class="file-details">
                                <div class="file-name">${escapeHtml(fileName)}</div>
                                <div class="file-size">${formatFileSize(fileSize)}</div>
                            </div>
                        </div>
                    </div>
                    <div class="message-time">${timePart}</div>
                </div>
            `;
        }
    } else {
        // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const formattedContent = formatTextWithLinks(content);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–¥
        const containsCode = formattedContent.includes('code-block');
        
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥, –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å message-with-code
        if (containsCode) {
            messageDiv.classList.add('message-with-code');
        }
        
        messageDiv.innerHTML = `
<div class="message-content">
    <div class="message-text">${formattedContent}</div>
    <div class="message-time">${timePart}</div>
</div>`;
    }
    
    chatMessages.appendChild(messageDiv);
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function formatMessageDate(date) {
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);

    if (date.toDateString() === today.toDateString()) {
        return '–°–µ–≥–æ–¥–Ω—è';
    } else if (date.toDateString() === yesterday.toDateString()) {
        return '–í—á–µ—Ä–∞';
    } else {
        return date.toLocaleString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
    }
}

function createDateDivider(dateText) {
    const divider = document.createElement("div");
    divider.classList.add("date-divider");
    divider.textContent = dateText;
    return divider;
}

function connectToChatHandler(username) {
    console.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —á–∞—Ç—É —Å ${username}...`);
    selectedUser = username;
    
    if (!username) {
        console.error('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ');
        return;
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
    if (currentChat) {
        stopChat();
    }
    
    // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —á–∞—Ç–∞
    const chatTitle = document.getElementById('chat-title');
    if (chatTitle) {
        chatTitle.textContent = username;
    }
    
    // –û—á–∏—â–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–Ω—É—é –¥–∞—Ç—É
    const messagesContainer = document.getElementById('chat-messages');
    if (messagesContainer) {
        messagesContainer.innerHTML = '';
        lastDisplayedDate = null;
    }
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–∞—Ç –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    const chatItems = document.querySelectorAll('.chat-item');
    chatItems.forEach(item => {
        item.classList.remove('active');
        if (item.dataset.username === username) {
            item.classList.add('active');
        }
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –∏ —Å–∫—Ä—ã–≤–∞–µ–º —Ñ—É—Ç–µ—Ä –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏
    const chatFooter = document.querySelector('.chat-footer');
    if (chatFooter) {
        chatFooter.style.display = 'none';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showKeyExchangeLoader(true);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    const urlParams = new URLSearchParams(window.location.search);
    urlParams.set('chat', username);
    window.history.replaceState({}, '', `${window.location.pathname}?${urlParams}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    const disconnectBtn = document.getElementById("disconnect-btn");
    if (disconnectBtn) {
        disconnectBtn.style.display = "block";
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏
    checkKeyExchangeStatus(username, (err, status) => {
        if (err) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏: ${err.message}`);
            showErrorToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —á–∞—Ç—É');
            showKeyExchangeLoader(false);
            return;
        }
        
        console.log(`–°—Ç–∞—Ç—É—Å –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏: ${status}`);
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —á–∞—Ç—É —á–µ—Ä–µ–∑ WebSocket
        connectToChat(username, (err, success) => {
            if (err) {
                console.error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç—É: ${err.message}`);
                showErrorToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —á–∞—Ç—É');
                showKeyExchangeLoader(false);
                return;
            }
            
            console.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —á–∞—Ç—É —Å ${username} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
            currentChat = username;
            
            // –ï—Å–ª–∏ –æ–±–º–µ–Ω –∫–ª—é—á–∞–º–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω (status = 2), —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º —á–∞—Ç —Å—Ä–∞–∑—É
            if (status === 2) { // COMPLETED
                showKeyExchangeLoader(false);
                if (chatFooter) {
                    chatFooter.style.display = 'flex';
                }
                startChatAfterKeyExchange(username);
            } else {
                // –ò–Ω–∞—á–µ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±–º–µ–Ω –∫–ª—é—á–∞–º–∏ –∏ –¥–∞–ª—å—à–µ –±—É–¥–µ–º –∂–¥–∞—Ç—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                initDiffieHellmanExchange(username);
            }
        });
    });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
 * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
 */
function onChatClick(event) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞
    if (event.target.classList.contains('delete-chat-btn')) {
        return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —ç–ª–µ–º–µ–Ω—Ç —á–∞—Ç–∞
    const chatItem = event.target.closest('.chat-item');
    if (!chatItem) return;
    
    const username = chatItem.dataset.username;
    if (!username) return;
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —á–∞—Ç—É
    connectToChatHandler(username);
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –∫–ª–∞–≤–∏—à—É Enter
 */
function onSendMessage() {
    const messageInput = document.getElementById('message-input');
    const messageText = messageInput.value.trim();
    
    if (messageText && currentChat) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat(messageText, (err) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
                showErrorToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
        return;
    }

            // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            messageInput.value = '';
        });
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param {string} message - –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
 */
function showErrorToast(message) {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ alert, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    alert(message);
}

function resetChatView() {
    const chatMessages = document.getElementById("chat-messages");
    chatMessages.innerHTML = "";
    lastDisplayedDate = null;
}

function handleCreateChat() {
    const username = document.getElementById("new-chat-username").value.trim();
    if (!username) {
        showError("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    const algorithm = getSelectedOption("algorithm-select");
    const mode = getSelectedOption("mode-select");
    const padding = getSelectedOption("padding-select");

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    const encryptionParams = {
        algorithm: algorithm,
        mode: mode,
        padding: padding
    };

    createChat(username, encryptionParams, (err, createdUsername) => {
        if (err) {
            console.error("Error creating chat:", err);
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞");
            return;
        }

        showSuccess(`–ß–∞—Ç —Å ${createdUsername} —Å–æ–∑–¥–∞–Ω`);
        
        // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–±–º–µ–Ω –∫–ª—é—á–∞–º–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
        initDiffieHellmanExchange(createdUsername);
        
        closeModal();
        loadChats();
        connectToChatHandler(createdUsername);
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
function getSelectedOption(groupId) {
    const group = document.getElementById(groupId);
    const selectedButton = group.querySelector(".option-btn.selected");
    return selectedButton ? selectedButton.getAttribute("data-value") : "";
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
 */
function initChatCreationModal() {
    const newChatBtn = document.getElementById('new-chat-btn');
    const modal = document.getElementById('create-chat-modal');
    const closeBtn = modal.querySelector('.close');
    const createBtn = document.getElementById('create-chat-submit');
    const cancelBtn = document.getElementById('create-chat-cancel');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –æ–ø—Ü–∏–π
    initOptionButtons();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    resetModal();

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    newChatBtn.addEventListener('click', () => {
        modal.style.display = 'block';
        resetModal();
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    closeBtn.addEventListener('click', closeModal);
    cancelBtn.addEventListener('click', closeModal);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    window.addEventListener('click', (event) => {
        if (event.target === modal) {
            closeModal();
        }
    });
    
    // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
    createBtn.addEventListener('click', handleCreateChat);
}

function initOptionButtons() {
    initOptionGroup("algorithm-select");
    initOptionGroup("mode-select");
    initOptionGroup("padding-select");
}

function initOptionGroup(groupId) {
    const group = document.getElementById(groupId);
    const buttons = group.querySelectorAll(".option-btn");

    buttons.forEach(button => {
        button.addEventListener("click", () => {
            buttons.forEach(btn => btn.classList.remove("selected"));
            button.classList.add("selected");
        });
    });
    
    // –ù–µ –≤—ã–±–∏—Ä–∞–µ–º –æ–ø—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–¥–µ—Å—å, —ç—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å resetModal
}

function showError(message) {
    alert(message);
}

function showSuccess(message) {
    alert(message);
}

function resetModal() {
    document.getElementById("new-chat-username").value = "";
    
    // –ê–ª–≥–æ—Ä–∏—Ç–º—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è - –≤—ã–±–∏—Ä–∞–µ–º Camellia
    selectOptionByValue("algorithm-select", "Camellia");
    
    // –†–µ–∂–∏–º—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è - –≤—ã–±–∏—Ä–∞–µ–º CBC
    selectOptionByValue("mode-select", "CBC");
    
    // –†–µ–∂–∏–º—ã –Ω–∞–±–∏–≤–∫–∏ - –≤—ã–±–∏—Ä–∞–µ–º PKCS7
    selectOptionByValue("padding-select", "PKCS7");
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
function selectOptionByValue(groupId, value) {
    const group = document.getElementById(groupId);
    const buttons = group.querySelectorAll(".option-btn");
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    buttons.forEach(btn => btn.classList.remove("selected"));
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É —Å –Ω—É–∂–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏ –≤—ã–¥–µ–ª—è–µ–º –µ—ë
    let found = false;
    buttons.forEach(btn => {
        if (btn.getAttribute("data-value") === value) {
            btn.classList.add("selected");
            found = true;
        }
    });
    
    // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ —Å —Ç–∞–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –Ω–µ—Ç, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é
    if (!found && buttons.length > 0) {
        buttons[0].classList.add("selected");
    }
}

function closeModal() {
    document.getElementById("create-chat-modal").style.display = "none";
}

function handleLogout() {
    localStorage.removeItem("token");
    window.location.href = "index.html";
}

function initLogoutButton() {
    document.getElementById("logout-btn").addEventListener("click", handleLogout);
}

function initDisconnectButton() {
    document.getElementById("disconnect-btn").addEventListener("click", handleDisconnect);
}

function handleDisconnect() {
    if (currentChat) {
        stopChat();
        
        // –û—á–∏—â–∞–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä
        const urlParams = new URLSearchParams(window.location.search);
        urlParams.delete('chat');
        const newUrl = `${window.location.pathname}?${urlParams.toString()}`;
        window.history.pushState({ path: newUrl }, '', newUrl);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º UI
        const chatTitle = document.getElementById("chat-title");
        if (chatTitle) {
            chatTitle.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç";
        }
        
        const disconnectBtn = document.getElementById("disconnect-btn");
        if (disconnectBtn) {
            disconnectBtn.style.display = "none";
        }
        
        const messageInput = document.getElementById("message-input");
        if (messageInput) {
            messageInput.disabled = true;
            messageInput.placeholder = "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç...";
        }
        
        const fileButton = document.getElementById("file-button");
        if (fileButton) {
            fileButton.disabled = true;
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ñ—É—Ç–µ—Ä —á–∞—Ç–∞
        const chatFooter = document.querySelector('.chat-footer');
        if (chatFooter) {
            chatFooter.classList.remove('active');
        }
        
        // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        const chatMessages = document.getElementById("chat-messages");
        if (chatMessages) {
            chatMessages.innerHTML = "";
        }
        
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å —á–∞—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
        const chatItems = document.querySelectorAll('.chat-item');
        chatItems.forEach(item => item.classList.remove('active'));
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É
        currentChat = null;
        lastDisplayedDate = null;
        selectedUser = null;
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
function formatFileSize(bytes) {
    if (bytes < 1024) return bytes + ' B';
    else if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
    else if (bytes < 1024 * 1024 * 1024) return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
    else return (bytes / (1024 * 1024 * 1024)).toFixed(1) + ' GB';
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
 */
function initFileHandling() {
    const fileInput = document.getElementById('file-input');
    const fileButton = document.getElementById('file-button');
    
    // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    fileButton.addEventListener('click', () => {
        fileInput.click();
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    fileInput.addEventListener('change', (event) => {
        if (event.target.files.length > 0) {
            selectedFile = event.target.files[0];
            
            if (selectedFile && currentChat) {
                console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞:', selectedFile.name, '–†–∞–∑–º–µ—Ä:', selectedFile.size);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                const messageInput = document.getElementById('message-input');
                if (messageInput) {
                    messageInput.disabled = true;
                    messageInput.placeholder = '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...';
                }
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                uploadFile(selectedFile, currentChat, (err, fileData) => {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    if (messageInput) {
                        messageInput.disabled = false;
                        messageInput.placeholder = '–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...';
                    }
                    
                    if (err) {
                        showErrorToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', err);
                        return;
                    }
                    
                    console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', fileData);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ–∞–π–ª–µ
                    if (fileData && fileData.fileId) {
                        sendFileMessage(fileData.fileId, selectedFile.name, selectedFile.size);
                    } else {
                        showErrorToast('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ');
                    }
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                    selectedFile = null;
                    fileInput.value = '';
                });
            }
        }
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
function showFilePreview(file) {
    const filePreviewModal = document.getElementById('file-preview-modal');
    const fileNameElement = document.getElementById('file-preview-name');
    const fileSizeElement = document.getElementById('file-preview-size');
    const filePreviewContent = document.getElementById('file-preview-content');
    
    fileNameElement.textContent = file.name;
    fileSizeElement.textContent = formatFileSize(file.size);
    filePreviewContent.innerHTML = '';
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (file.type.startsWith('image/')) {
        const img = document.createElement('img');
        const reader = new FileReader();
        
        reader.onload = (e) => {
            img.src = e.target.result;
            filePreviewContent.appendChild(img);
        };
        
        reader.readAsDataURL(file);
    }
    
    filePreviewModal.style.display = 'block';
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
function uploadSelectedFile() {
    if (!selectedFile || !currentChat) return;
    
    const filePreviewModal = document.getElementById('file-preview-modal');
    const progressContainer = document.createElement('div');
    progressContainer.className = 'upload-progress';
    
    const progressBar = document.createElement('div');
    progressBar.className = 'upload-progress-bar';
    progressContainer.appendChild(progressBar);
    
    document.getElementById('file-preview-content').appendChild(progressContainer);
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
    document.getElementById('send-file-button').disabled = true;
    document.getElementById('cancel-file-button').disabled = true;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    uploadFile(selectedFile, currentChat, (err, fileData) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', err);
            showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
            
            // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
            document.getElementById('send-file-button').disabled = false;
            document.getElementById('cancel-file-button').disabled = false;
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
        sendFileMessage(fileData.fileId, fileData.fileName || selectedFile.name, selectedFile.size);
        
        // –û—á–∏—â–∞–µ–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        filePreviewModal.style.display = 'none';
        selectedFile = null;
        document.getElementById('file-input').value = '';
        document.getElementById('send-file-button').disabled = false;
        document.getElementById('cancel-file-button').disabled = false;
    });
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞
function viewFile(fileId) {
    if (!fileId) {
        console.error('fileId –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞');
        return;
    }
    
    console.log('–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞ —Å ID:', fileId);
    
    const fileViewModal = document.getElementById('file-view-modal');
    const fileViewName = document.getElementById('file-view-name');
    const fileViewContainer = document.getElementById('file-view-container');
    const downloadButton = document.getElementById('download-file-button');
    
    if (!fileViewModal || !fileViewName || !fileViewContainer || !downloadButton) {
        console.error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞');
        return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    downloadButton.setAttribute('data-file-id', fileId);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    downloadButton.onclick = function() {
        const id = this.getAttribute('data-file-id');
        if (id) {
            downloadFileHandler(id);
        }
    };
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    fileViewContainer.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...</div>';
    fileViewName.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
    fileViewModal.style.display = 'block';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    downloadFile(fileId, (err, fileData) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', err);
            fileViewContainer.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞</div>';
            return;
        }
        
        if (!fileData) {
            console.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∞–π–ª–µ');
            fileViewContainer.innerHTML = '<div class="error">–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ</div>';
            return;
        }
        
        console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', fileData);
        
        fileViewName.textContent = fileData.filename || '–§–∞–π–ª';
        fileViewContainer.innerHTML = '';
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if (fileData.url) {
            if (fileData.mimeType && fileData.mimeType.startsWith('image/')) {
                const img = document.createElement('img');
                img.src = fileData.url;
                img.className = 'file-preview-image';
                fileViewContainer.appendChild(img);
            } else {
                const fileLink = document.createElement('div');
                fileLink.className = 'file-link';
                fileLink.innerHTML = `
                    <div class="file-icon large">üìÑ</div>
                    <div class="file-info">
                        <div class="file-name">${escapeHtml(fileData.filename || '–§–∞–π–ª')}</div>
                        <div class="file-size">${formatFileSize(fileData.size || 0)}</div>
                        <div class="file-message">–ù–∞–∂–º–∏—Ç–µ "–°–∫–∞—á–∞—Ç—å" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞</div>
                    </div>
                `;
                fileViewContainer.appendChild(fileLink);
            }
        } else {
            fileViewContainer.innerHTML = '<div class="error">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª</div>';
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
function downloadFileHandler(fileId) {
    if (!fileId) {
        showErrorToast('ID —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
        return;
    }
    
    console.log('–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å ID:', fileId);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const downloadButton = document.getElementById('download-file-button');
    if (downloadButton) {
        downloadButton.disabled = true;
        downloadButton.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
    }
    
    downloadFile(fileId, (err, fileData) => {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (downloadButton) {
            downloadButton.disabled = false;
            downloadButton.textContent = '–°–∫–∞—á–∞—Ç—å';
        }
        
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', err);
            showErrorToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞');
            return;
        }
        
        if (!fileData || !fileData.url) {
            console.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∞–π–ª–µ –∏–ª–∏ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è');
            showErrorToast('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è');
            return;
        }
        
        console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', fileData);
        
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ —ç–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫
        const downloadLink = document.createElement('a');
        downloadLink.href = fileData.url;
        downloadLink.download = fileData.filename || 'file';
        document.body.appendChild(downloadLink);
        downloadLink.click();
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        setTimeout(() => {
            document.body.removeChild(downloadLink);
            URL.revokeObjectURL(fileData.url); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º URL
        }, 100);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML-—Ç–µ–≥–æ–≤
function escapeHtml(str) {
    if (!str) return '';
    return str.replace(/[&<>"']/g, tag => ({
        '&': '&amp;', 
        '<': '&lt;', 
        '>': '&gt;', 
        '"': '&quot;', 
        "'": '&#39;'
    })[tag] || tag);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateStr) {
    try {
        const date = new Date(dateStr);
        console.log('–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã:', dateStr, '–û–±—ä–µ–∫—Ç Date:', date);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        if (isNaN(date.getTime())) {
            console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞:', dateStr);
            return '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞';
        }
        
        const now = new Date();
        
        // –°–µ–≥–æ–¥–Ω—è
        if (date.toDateString() === now.toDateString()) {
            return '–°–µ–≥–æ–¥–Ω—è';
        }
        
        // –í—á–µ—Ä–∞
        const yesterday = new Date(now);
        yesterday.setDate(now.getDate() - 1);
        if (date.toDateString() === yesterday.toDateString()) {
            return '–í—á–µ—Ä–∞';
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–∞—Ç
        const options = { day: 'numeric', month: 'long', year: 'numeric' };
        return date.toLocaleDateString('ru-RU', options);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã:', error);
        return '–û—à–∏–±–∫–∞ –¥–∞—Ç—ã';
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç SQL-–∑–∞–ø—Ä–æ—Å–æ–º
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} - true, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Ö–æ–∂ –Ω–∞ SQL
 */
function isSqlCode(text) {
    // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SQL –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    const sqlPatterns = [
        /SELECT\s+.+\s+FROM\s+.+/i,
        /INSERT\s+INTO\s+.+\s+VALUES/i,
        /UPDATE\s+.+\s+SET\s+.+/i,
        /DELETE\s+FROM\s+.+/i,
        /CREATE\s+TABLE\s+.+/i,
        /ALTER\s+TABLE\s+.+/i,
        /JOIN\s+.+\s+ON\s+.+/i
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ 3 –∏–ª–∏ –±–æ–ª–µ–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ SQL
    const sqlKeywords = ['SELECT', 'FROM', 'WHERE', 'JOIN', 'GROUP BY', 'ORDER BY', 
                         'INSERT', 'UPDATE', 'DELETE', 'CREATE', 'ALTER', 'DROP',
                         'INTO', 'VALUES', 'SET', 'TABLE', 'AND', 'OR', 'ON'];
    
    const upperText = text.toUpperCase();
    const keywordCount = sqlKeywords.filter(keyword => 
        upperText.includes(` ${keyword} `) || 
        upperText.includes(`${keyword} `) || 
        upperText.includes(` ${keyword}\n`)
    ).length;
    
    return sqlPatterns.some(pattern => pattern.test(text)) || keywordCount >= 3;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {string} - HTML —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function formatTextWithLinks(text) {
    if (!text) return '';
    
    // –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
    const escapedText = escapeHtml(text);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –∫–æ–¥–∞ ```
    const codeBlockRegex = /```(\w*)\n([\s\S]*?)```/g;
    let match;
    let formattedText = escapedText;
    let hasCodeBlock = false;
    
    // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ —Å –æ–±—Ä–∞–º–ª–µ–Ω–∏–µ–º ```
    while ((match = codeBlockRegex.exec(escapedText)) !== null) {
        hasCodeBlock = true;
        const lang = match[1] || 'code'; // –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        const code = match[2];
        
        let formattedCode;
        if (lang.toLowerCase() === 'sql' || (lang === '' && isSqlCode(code))) {
            formattedCode = formatSqlCode(code);
        } else {
            // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤
            formattedCode = `<pre class="code-block ${lang}-code">${code}</pre>`;
        }
        
        formattedText = formattedText.replace(match[0], formattedCode);
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ SQL
    if (!hasCodeBlock && isSqlCode(escapedText)) {
        return formatSqlCode(escapedText);
    }
    
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
    const urlPattern = /(https?:\/\/[^\s]+)/g;
    
    // –ó–∞–º–µ–Ω–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ HTML-—Å—Å—ã–ª–∫–∏
    return formattedText.replace(urlPattern, (url) => {
        return `<a href="${url}" target="_blank" rel="noopener noreferrer">${url}</a>`;
    });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç SQL-–∫–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
 * @param {string} sqlText - SQL-–∫–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–¥–∞
 */
function formatSqlCode(sqlText) {
    // –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–¥ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    let lines = sqlText.split(/\r?\n/);
    
    // –ï—Å–ª–∏ SQL –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    if (lines.length === 1 && lines[0].length > 50) {
        const sqlStr = lines[0];
        lines = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —á–∞—Å—Ç–µ–π SQL –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const keywords = ['SELECT', 'FROM', 'WHERE', 'GROUP BY', 'ORDER BY', 'HAVING', 
                         'JOIN', 'LEFT JOIN', 'RIGHT JOIN', 'INNER JOIN', 
                         'INSERT INTO', 'VALUES', 'UPDATE', 'SET', 'DELETE FROM'];
        
        let lastPos = 0;
        let resultParts = [];
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ SQL –∏ –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã
        for (const keyword of keywords) {
            const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
            let match;
            
            while ((match = regex.exec(sqlStr)) !== null) {
                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –æ–Ω–æ –Ω–µ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å—Ç—Ä–æ–∫–∏
                if (match.index > lastPos && match.index > 0) {
                    // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –¥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                    resultParts.push(sqlStr.substring(lastPos, match.index).trim());
                    lastPos = match.index;
                }
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å
        if (lastPos < sqlStr.length) {
            resultParts.push(sqlStr.substring(lastPos).trim());
        }
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        if (resultParts.length <= 1) {
            lines = [sqlStr];
        } else {
            lines = resultParts;
        }
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É, –≤—ã–¥–µ–ª—è—è –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    const formattedLines = lines.map(line => {
        if (!line.trim()) return ''; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        
        // –í—ã–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ SQL
        return line
            .replace(/\b(SELECT|FROM|WHERE|JOIN|LEFT|RIGHT|INNER|OUTER|CROSS|ON|GROUP BY|ORDER BY|HAVING|INSERT|INTO|UPDATE|DELETE|SET|VALUES|AND|OR|AS|IN|BETWEEN|LIKE|IS|NULL|NOT|CASE|WHEN|THEN|ELSE|END|UNION|ALL|LIMIT|OFFSET|COUNT|SUM|AVG|MIN|MAX|DISTINCT)\b/gi, 
                     match => `<span class="sql-keyword">${match}</span>`)
            .replace(/('.*?'|".*?")/g, 
                     match => `<span class="sql-string">${match}</span>`)
            .replace(/\b(\d+)\b/g,
                     match => `<span class="sql-number">${match}</span>`);
    });
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –±–ª–æ–∫ –∫–æ–¥–∞
    return `<pre class="code-block sql-code">${formattedLines.join('\n')}</pre>`;
}

/**
 * –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å –ø–æ –º–æ–¥—É–ª—é (–±—ã—Å—Ç—Ä–æ–µ –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º BigInt
 * @param {string|number} base - –û—Å–Ω–æ–≤–∞–Ω–∏–µ
 * @param {string|number} exponent - –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏
 * @param {string|number} modulus - –ú–æ–¥—É–ª—å
 * @returns {string} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ (base^exponent mod modulus) –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
 */
function powMod(base, exponent, modulus) {
    try {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ BigInt, —É—á–∏—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        const bigBase = typeof base === 'string' && /^[0-9A-Fa-f]+$/.test(base) && !/^\d+$/.test(base) 
            ? BigInt('0x' + base) 
            : BigInt(base);
            
        const bigExponent = typeof exponent === 'string' && /^[0-9A-Fa-f]+$/.test(exponent) && !/^\d+$/.test(exponent) 
            ? BigInt('0x' + exponent) 
            : BigInt(exponent);
            
        const bigModulus = typeof modulus === 'string' && /^[0-9A-Fa-f]+$/.test(modulus) && !/^\d+$/.test(modulus) 
            ? BigInt('0x' + modulus) 
            : BigInt(modulus);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (bigModulus === 1n) return "0";
        
        let result = 1n;
        let baseMod = bigBase % bigModulus;
        let exp = bigExponent;
        
        // –ë—ã—Å—Ç—Ä–æ–µ –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å –ø–æ –º–æ–¥—É–ª—é
        while (exp > 0n) {
            if (exp % 2n === 1n) {
                result = (result * baseMod) % bigModulus;
            }
            exp = exp >> 1n;
            baseMod = (baseMod * baseMod) % bigModulus;
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–π —Ñ–æ—Ä–º–µ
        return result.toString();
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ powMod:", error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return "1000000007"; // –ü—Ä–æ—Å—Ç–æ –±–æ–ª—å—à–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ
    }
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
 * –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É –î–∏—Ñ—Ñ–∏-–•–µ–ª–ª–º–∞–Ω–∞: K = peerPublicKey^privateKey mod p
 * @param {string|number} privateKey - –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string|number} peerPublicKey - –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
 * @param {string|number} p - –û–±—â–∏–π –º–æ–¥—É–ª—å (–±–æ–ª—å—à–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ)
 * @returns {string} - –û–±—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –≤ –≤–∏–¥–µ 16-—Ä–∏—á–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
function combineKeys(privateKey, peerPublicKey, p) {
    try {
        console.log(`–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–ª—é—á–∞: privateKey=${privateKey}, peerPublicKey=${peerPublicKey}, p=${p}`);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –ø–æ —Ñ–æ—Ä–º—É–ª–µ: K = peerPublicKey^privateKey mod p
        const sharedSecret = powMod(peerPublicKey, privateKey, p);
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ NaN
        if (sharedSecret === "NaN" || !sharedSecret) {
            throw new Error("–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–ª—é—á–∞ –≤–µ—Ä–Ω—É–ª–æ NaN");
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –≤ 16-—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        try {
            // –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ BigInt –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
            return BigInt(sharedSecret).toString(16);
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ sharedSecret –≤ hex:", e);
            // –ï—Å–ª–∏ BigInt –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥
            return Number(sharedSecret).toString(16);
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ combineKeys:", error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
        const backupKey = Math.floor(Math.random() * 1000000).toString(16);
        console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–ª—é—á: ${backupKey}`);
        return backupKey;
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –æ–±–º–µ–Ω –∫–ª—é—á–∞–º–∏ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É –î–∏—Ñ—Ñ–∏-–•–µ–ª–ª–º–∞–Ω–∞
 * @param {string} username - –ò–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
 */
function initDiffieHellmanExchange(username) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –î–∏—Ñ—Ñ–∏-–•–µ–ª–ª–º–∞–Ω–∞ (p –∏ g)
        const dhParams = getDiffieHellmanParams();
        
        console.log('–ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã DH:', dhParams);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (!dhParams || !dhParams.p || !dhParams.g) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –î–∏—Ñ—Ñ–∏-–•–µ–ª–ª–º–∞–Ω–∞:', dhParams);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Ñ–æ—Ä–º–∞—Ç
        const p = dhParams.p;
        const g = dhParams.g;
        const isHex = dhParams.isHex === true;
        
        console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã DH: p=${p}, g=${g}, —Ñ–æ—Ä–º–∞—Ç: ${isHex ? '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–π' : '–¥–µ—Å—è—Ç–∏—á–Ω—ã–π'}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingKey = localStorage.getItem(`dh_private_key_${username}`);
        if (existingKey) {
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ —Ñ–æ—Ä–º—É–ª–µ: A = g^a mod p
            const publicKey = powMod(g, existingKey, p);
            console.log(`–í—ã—á–∏—Å–ª–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: ${publicKey}`);
            
            initKeyExchangeWithExistingKey(username, publicKey, existingKey);
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –∫–∞–∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (–Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º)
        const privateKey = Math.floor(Math.random() * 10000) + 100;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ —Ñ–æ—Ä–º—É–ª–µ: A = g^a mod p
        const publicKey = powMod(g, privateKey, p);
        console.log(`–í—ã—á–∏—Å–ª–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: ${publicKey} (privateKey=${privateKey})`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ localStorage –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        localStorage.setItem(`dh_private_key_${username}`, privateKey.toString());
        
        // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–±–º–µ–Ω –∫–ª—é—á–∞–º–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—è –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        initKeyExchange(username, publicKey.toString(), (err, success) => {
            if (err) {
                console.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏ —Å ${username}:`, err);
                // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, 
                // —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
            } else {
                console.log(`–û–±–º–µ–Ω –∫–ª—é—á–∞–º–∏ —Å ${username} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: ${publicKey})`);
                
                // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ B –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                // –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –≤—ã—á–∏—Å–ª–∏—Ç—å –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á, –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                checkForCompletedKeyExchange(username);
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ initDiffieHellmanExchange:', error);
        // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–ª—é—á–æ–º
 */
function initKeyExchangeWithExistingKey(username, publicKey, privateKey) {
    initKeyExchange(username, publicKey, (err, success) => {
        if (err) {
            console.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏ —Å ${username} (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á):`, err);
        } else {
            console.log(`–û–±–º–µ–Ω –∫–ª—é—á–∞–º–∏ —Å ${username} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á: ${privateKey})`);
            checkForCompletedKeyExchange(username);
        }
    });
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –æ–±–º–µ–Ω –∫–ª—é—á–∞–º–∏, –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –µ—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫
 * @param {string} username - –ò–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
 */
function checkForCompletedKeyExchange(username) {
    getKeyExchangeParams(username, (err, params) => {
        if (err) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏ —Å ${username}:`, err);
            // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º –ø–æ–ø—ã—Ç–æ–∫
            setTimeout(() => {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤ localStorage, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                const attemptKey = `key_exchange_attempts_${username}`;
                const attempts = parseInt(localStorage.getItem(attemptKey) || '0');
                
                if (attempts < 3) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫
                    localStorage.setItem(attemptKey, (attempts + 1).toString());
                    checkForCompletedKeyExchange(username);
                } else {
                    console.log(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏ —Å ${username}`);
                    localStorage.removeItem(attemptKey);
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É—Ç–µ—Ä –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                    showKeyExchangeLoader(false);
                    const chatFooter = document.querySelector('.chat-footer');
                    if (chatFooter) {
                        chatFooter.style.display = 'flex';
                    }
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º —á–∞—Ç –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É
                    startChatAfterKeyExchange(username);
                }
            }, 5000);
            return;
        }
        
        console.log(`–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏ —Å ${username}:`, params);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        localStorage.removeItem(`key_exchange_attempts_${username}`);
        
        if (params.status === 2) { // COMPLETED
            // –û–±–º–µ–Ω –∫–ª—é—á–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω, –º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
            const privateKeyStr = localStorage.getItem(`dh_private_key_${username}`);
            
            if (!privateKeyStr) {
                console.error(`–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage`);
                return;
            }
            
            // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å (—Å—Ç—Ä–æ–∫–∞)
            const privateKey = privateKeyStr;
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            const peerPublicKey = params.dhBPublic || "";
            
            if (!peerPublicKey) {
                console.error(`–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
                return;
            }
            
            console.log(`–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–∞—Ä—Ç–Ω–µ—Ä–∞: ${peerPublicKey}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä p –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç
            const p = params.dhP || "";
            const isHex = params.isHex === true;
            
            if (!p) {
                console.error(`–ü–∞—Ä–∞–º–µ—Ç—Ä p –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
                return;
            }
            
            // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –ø–æ —Ñ–æ—Ä–º—É–ª–µ: K = B^a mod p
            try {
                const sharedSecret = combineKeys(privateKey, peerPublicKey, p);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
                localStorage.setItem(`dh_shared_key_${username}`, sharedSecret);
                console.log(`–í—ã—á–∏—Å–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è ${username}: ${sharedSecret}`);
                
                // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É—Ç–µ—Ä
                showKeyExchangeLoader(false);
                const chatFooter = document.querySelector('.chat-footer');
                if (chatFooter) {
                    chatFooter.style.display = 'flex';
                }
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —á–∞—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏
                startChatAfterKeyExchange(username);
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ –∫–ª—é—á–∞ –¥–ª—è ${username}:`, error);
                // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π "—Ä–µ–∑–µ—Ä–≤–Ω—ã–π" –∫–ª—é—á
                const fallbackKey = Math.floor(Math.random() * 1000000).toString(16);
                localStorage.setItem(`dh_shared_key_${username}`, fallbackKey);
                console.log(`–°–æ–∑–¥–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ–±—â–∏–π –∫–ª—é—á: ${fallbackKey}`);
                
                // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É—Ç–µ—Ä –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                showKeyExchangeLoader(false);
                const chatFooter = document.querySelector('.chat-footer');
                if (chatFooter) {
                    chatFooter.style.display = 'flex';
                }
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —á–∞—Ç –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É
                startChatAfterKeyExchange(username);
            }
        } else if (params.status === 1) { // INITIATED
            // –û–±–º–µ–Ω –∫–ª—é—á–∞–º–∏ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–∑–∂–µ
            setTimeout(() => checkForCompletedKeyExchange(username), 5000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        }
    });
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –µ–≥–æ
 * @param {string} username - –ò–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
 * @param {function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ (err, status)
 */
function checkKeyExchangeStatus(username, callback) {
    getKeyExchangeParams(username, (err, params) => {
        if (err) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏ —Å ${username}:`, err);
            // –í–º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—á–∏ –æ—à–∏–±–∫–∏ –≤ callback –∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞,
            // –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å 0 (NOT_STARTED), —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å—Å—è
            callback(null, 0);
            return;
        }
        
        console.log(`–ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏ –¥–ª—è ${username}:`, params);
        
        // –ï—Å–ª–∏ –æ–±–º–µ–Ω –∫–ª—é—á–∞–º–∏ –Ω–µ –Ω–∞—á–∞—Ç –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
        if (params.status === 0 || params.status === 2) { // NOT_STARTED –∏–ª–∏ COMPLETED
            callback(null, params.status);
            return;
        }
        
        // –ï—Å–ª–∏ –æ–±–º–µ–Ω –∫–ª—é—á–∞–º–∏ –±—ã–ª –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –µ–≥–æ
        if (params.status === 1) { // INITIATED
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
                const existingPrivateKey = localStorage.getItem(`dh_private_key_${username}`);
                let privateKey;
                
                if (existingPrivateKey) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
                    privateKey = existingPrivateKey;
                } else {
                    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã p –∏ g –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Ñ–æ—Ä–º–∞—Ç
                    const p = params.dhP || "";
                    const g = params.dhG || "";
                    const isHex = params.isHex === true;
                    
                    if (!p || !g) {
                        console.error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã DH: p=${p}, g=${g}`);
                        callback(null, 0);
                        return;
                    }
                    
                    console.log(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã DH: p=${p}, g=${g}, —Ñ–æ—Ä–º–∞—Ç: ${isHex ? '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–π' : '–¥–µ—Å—è—Ç–∏—á–Ω—ã–π'}`);
                    
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –∫–∞–∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
                    privateKey = Math.floor(Math.random() * 10000) + 100;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ localStorage
                    localStorage.setItem(`dh_private_key_${username}`, privateKey.toString());
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã p –∏ g –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
                const p = params.dhP || "";
                const g = params.dhG || "";
                const isHex = params.isHex === true;
                
                if (!p || !g) {
                    console.error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã DH –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: p=${p}, g=${g}`);
                    callback(null, 0);
                    return;
                }
                
                console.log(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞: g=${g}, privateKey=${privateKey}, p=${p}, —Ñ–æ—Ä–º–∞—Ç: ${isHex ? '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–π' : '–¥–µ—Å—è—Ç–∏—á–Ω—ã–π'}`);
                
                // –í—ã—á–∏—Å–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ —Ñ–æ—Ä–º—É–ª–µ: B = g^b mod p
                const publicKey = powMod(g, privateKey, p);
                console.log(`–í—ã—á–∏—Å–ª–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: ${publicKey}`);
                
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±–º–µ–Ω –∫–ª—é—á–∞–º–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–∞—à –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
                completeKeyExchange(username, publicKey, (err, success) => {
                    if (err) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏ —Å ${username}:`, err);
                        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å 0
                        callback(null, 0);
                    } else {
                        console.log(`–û–±–º–µ–Ω –∫–ª—é—á–∞–º–∏ —Å ${username} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω`);
                        
                        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
                        // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        const peerPublicKey = params.dhAPublic || "";
                        
                        if (!peerPublicKey) {
                            console.error(`–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
                            callback(null, 0);
                            return;
                        }
                        
                        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –ø–æ —Ñ–æ—Ä–º—É–ª–µ: K = A^b mod p
                        try {
                            const sharedSecret = combineKeys(privateKey, peerPublicKey, p);
                            
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
                            localStorage.setItem(`dh_shared_key_${username}`, sharedSecret);
                            
                            callback(null, 2); // COMPLETED
                        } catch (error) {
                            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ –∫–ª—é—á–∞: ${error.message}`);
                            // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π "—Ä–µ–∑–µ—Ä–≤–Ω—ã–π" –∫–ª—é—á
                            const fallbackKey = Math.floor(Math.random() * 1000000).toString(16);
                            localStorage.setItem(`dh_shared_key_${username}`, fallbackKey);
                            console.log(`–°–æ–∑–¥–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ–±—â–∏–π –∫–ª—é—á: ${fallbackKey}`);
                            callback(null, 2); // –°—á–∏—Ç–∞–µ–º –æ–±–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º
                        }
                    }
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏:', error);
                // –¢–∞–∫–∂–µ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
                callback(null, 0);
            }
        }
    });
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞
 * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —É–¥–∞–ª–µ–Ω–∏—è
 */
function handleDeleteChat(event) {
    event.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    
    const username = event.currentTarget.dataset.username;
    if (!username) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ');
        return;
    }
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–∞—Ç —Å ${username}?`)) {
        return;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ—Ç —á–∞—Ç —Å–µ–π—á–∞—Å –æ—Ç–∫—Ä—ã—Ç, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
    if (currentChat === username) {
        handleDisconnect();
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞
    deleteChat(username, (err, success) => {
        if (err) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ —Å ${username}:`, err);
            showError(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Ç —Å ${username}`);
            return;
        }
        
        if (success) {
            console.log(`–ß–∞—Ç —Å ${username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
            
            // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —á–∞—Ç–∞ –∏–∑ UI
            const chatItem = document.querySelector(`.chat-item[data-username="${username}"]`);
            if (chatItem) {
                chatItem.remove();
            }
            
            showSuccess(`–ß–∞—Ç —Å ${username} —É–¥–∞–ª–µ–Ω`);
        } else {
            showError(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Ç —Å ${username}`);
        }
    });
}

document.addEventListener("DOMContentLoaded", function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    loadChats();
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    document.getElementById("chat-list").addEventListener("click", onChatClick);
    document.getElementById("send-button").addEventListener("click", onSendMessage);
    
    const messageInput = document.getElementById("message-input");
    messageInput.addEventListener("keypress", (event) => {
        if (event.key === "Enter") {
            onSendMessage();
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ —Ñ–∞–π–ª–∞–º –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    document.addEventListener('click', function(event) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        if (event.target.matches('.chat-image')) {
            return;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —ç–ª–µ–º–µ–Ω—Ç .message-file –æ—Ç –º–µ—Å—Ç–∞ –∫–ª–∏–∫–∞
        const fileElement = event.target.closest('.message-file');
        if (fileElement) {
            const fileId = fileElement.getAttribute('data-file-id');
            if (fileId) {
                console.log('–ö–ª–∏–∫ –ø–æ —Ñ–∞–π–ª—É —Å ID:', fileId);
                viewFile(fileId);
            }
        }
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
    const fileViewModal = document.getElementById('file-view-modal');
    const closeFileViewButton = document.getElementById('close-file-view-button');
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞
    if (closeFileViewButton) {
        closeFileViewButton.addEventListener('click', () => {
            if (fileViewModal) {
                fileViewModal.style.display = 'none';
            }
        });
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
    document.querySelectorAll('.modal .close').forEach(closeBtn => {
        closeBtn.addEventListener('click', () => {
            const modal = closeBtn.closest('.modal');
            if (modal) {
                modal.style.display = 'none';
            }
        });
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    window.addEventListener('click', (event) => {
        document.querySelectorAll('.modal').forEach(modal => {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ UI
    initChatCreationModal();
    initLogoutButton();
    initDisconnectButton();
    initFileHandling();
    
    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (—á–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω)
    const disconnectBtn = document.getElementById("disconnect-btn");
    if (disconnectBtn) {
        disconnectBtn.style.display = "none";
    }
    
    const messageInputElement = document.getElementById("message-input");
    if (messageInputElement) {
        messageInputElement.disabled = true;
        messageInputElement.placeholder = "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç...";
    }
    
    const fileButton = document.getElementById("file-button");
    if (fileButton) {
        fileButton.disabled = true;
    }
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ—É—Ç–µ—Ä —Å–∫—Ä—ã—Ç, –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω —á–∞—Ç
    const chatFooter = document.querySelector('.chat-footer');
    if (chatFooter && !currentChat) {
        chatFooter.classList.remove('active');
    }
    
    console.log('–ß–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:', new Date());
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
    document.addEventListener('click', function(event) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–ª–∏–∫ –ø–æ –±–ª–æ–∫—É –∫–æ–¥–∞
        const codeBlock = event.target.closest('.code-block');
        
        if (codeBlock) {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å expanded –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            codeBlock.classList.toggle('expanded');
            
            // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º/—É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å expanded
            const messageWithCode = codeBlock.closest('.message-with-code');
            if (messageWithCode) {
                messageWithCode.classList.toggle('expanded');
            }
        }
    });
});

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ –≤—Ä–µ–º—è –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏
 * @param {boolean} show - –ü–æ–∫–∞–∑–∞—Ç—å (true) –∏–ª–∏ —Å–∫—Ä—ã—Ç—å (false) —Å–ø–∏–Ω–Ω–µ—Ä
 */
function showKeyExchangeLoader(show) {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
    const messagesContainer = document.getElementById('chat-messages');
    if (!messagesContainer) return;
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏–Ω–Ω–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const existingLoader = document.getElementById('key-exchange-loader');
    if (existingLoader) {
        existingLoader.remove();
    }
    
    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä
    if (show) {
        const loaderElement = document.createElement('div');
        loaderElement.id = 'key-exchange-loader';
        loaderElement.className = 'key-exchange-loader';
        
        const spinnerElement = document.createElement('div');
        spinnerElement.className = 'spinner';
        loaderElement.appendChild(spinnerElement);
        
        const messageElement = document.createElement('div');
        messageElement.className = 'loader-message';
        messageElement.textContent = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±–º–µ–Ω –∫–ª—é—á–∞–º–∏...';
        loaderElement.appendChild(messageElement);
        
        messagesContainer.appendChild(loaderElement);
    }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —á–∞—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏
 * @param {string} username - –ò–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
 */
function startChatAfterKeyExchange(username) {
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —á–∞—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∑–∞–ø—É—Å–∫–∞–µ–º–æ–≥–æ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
    if (currentChat && currentChat !== username) {
        stopChat();
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —á–∞—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    startChat(handleIncomingMessage);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    const urlParams = new URLSearchParams(window.location.search);
    urlParams.set('chat', username);
    window.history.replaceState({}, '', `${window.location.pathname}?${urlParams}`);
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤–≤–æ–¥–∞
    const messageInput = document.getElementById("message-input");
    if (messageInput) {
        messageInput.disabled = false;
        messageInput.placeholder = "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...";
        messageInput.focus(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
    
    const fileButton = document.getElementById("file-button");
    if (fileButton) {
        fileButton.disabled = false;
    }
    
    const disconnectBtn = document.getElementById("disconnect-btn");
    if (disconnectBtn) {
        disconnectBtn.style.display = "block";
    }
    
    // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
    currentChat = username;
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–æ–≤
 */
export function setupChatsUI() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    loadChats();
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    document.getElementById("chat-list").addEventListener("click", onChatClick);
    document.getElementById("send-button").addEventListener("click", onSendMessage);
    
    const messageInput = document.getElementById("message-input");
    messageInput.addEventListener("keypress", (event) => {
        if (event.key === "Enter") {
            onSendMessage();
        }
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ UI
    initChatCreationModal();
    initLogoutButton();
    initDisconnectButton();
    initFileHandling();
    
    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (—á–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω)
    const disconnectBtn = document.getElementById("disconnect-btn");
    if (disconnectBtn) {
        disconnectBtn.style.display = "none";
    }
    
    const messageInputElement = document.getElementById("message-input");
    if (messageInputElement) {
        messageInputElement.disabled = true;
        messageInputElement.placeholder = "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç...";
    }
    
    const fileButton = document.getElementById("file-button");
    if (fileButton) {
        fileButton.disabled = true;
    }
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ—É—Ç–µ—Ä —Å–∫—Ä—ã—Ç, –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω —á–∞—Ç
    const chatFooter = document.querySelector('.chat-footer');
    if (chatFooter && !currentChat) {
        chatFooter.classList.remove('active');
    }
    
    console.log('–ß–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:', new Date());
}

