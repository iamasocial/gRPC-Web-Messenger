/**
 * @fileoverview gRPC-Web generated client stub for messenger
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.3
// source: chat_service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.messenger = require('./chat_service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.messenger.ChatServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.messenger.ChatServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.messenger.CreateChatRequest,
 *   !proto.messenger.CreateChatResponse>}
 */
const methodDescriptor_ChatService_CreateChat = new grpc.web.MethodDescriptor(
  '/messenger.ChatService/CreateChat',
  grpc.web.MethodType.UNARY,
  proto.messenger.CreateChatRequest,
  proto.messenger.CreateChatResponse,
  /**
   * @param {!proto.messenger.CreateChatRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.messenger.CreateChatResponse.deserializeBinary
);


/**
 * @param {!proto.messenger.CreateChatRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.messenger.CreateChatResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.CreateChatResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.messenger.ChatServiceClient.prototype.createChat =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/messenger.ChatService/CreateChat',
      request,
      metadata || {},
      methodDescriptor_ChatService_CreateChat,
      callback);
};


/**
 * @param {!proto.messenger.CreateChatRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.messenger.CreateChatResponse>}
 *     Promise that resolves to the response
 */
proto.messenger.ChatServicePromiseClient.prototype.createChat =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/messenger.ChatService/CreateChat',
      request,
      metadata || {},
      methodDescriptor_ChatService_CreateChat);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.messenger.GetChatsRequst,
 *   !proto.messenger.GetChatsResponse>}
 */
const methodDescriptor_ChatService_GetChats = new grpc.web.MethodDescriptor(
  '/messenger.ChatService/GetChats',
  grpc.web.MethodType.UNARY,
  proto.messenger.GetChatsRequst,
  proto.messenger.GetChatsResponse,
  /**
   * @param {!proto.messenger.GetChatsRequst} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.messenger.GetChatsResponse.deserializeBinary
);


/**
 * @param {!proto.messenger.GetChatsRequst} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.messenger.GetChatsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.GetChatsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.messenger.ChatServiceClient.prototype.getChats =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/messenger.ChatService/GetChats',
      request,
      metadata || {},
      methodDescriptor_ChatService_GetChats,
      callback);
};


/**
 * @param {!proto.messenger.GetChatsRequst} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.messenger.GetChatsResponse>}
 *     Promise that resolves to the response
 */
proto.messenger.ChatServicePromiseClient.prototype.getChats =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/messenger.ChatService/GetChats',
      request,
      metadata || {},
      methodDescriptor_ChatService_GetChats);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.messenger.ConnectRequest,
 *   !proto.messenger.ConnectResponse>}
 */
const methodDescriptor_ChatService_ConnectToChat = new grpc.web.MethodDescriptor(
  '/messenger.ChatService/ConnectToChat',
  grpc.web.MethodType.UNARY,
  proto.messenger.ConnectRequest,
  proto.messenger.ConnectResponse,
  /**
   * @param {!proto.messenger.ConnectRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.messenger.ConnectResponse.deserializeBinary
);


/**
 * @param {!proto.messenger.ConnectRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.messenger.ConnectResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.ConnectResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.messenger.ChatServiceClient.prototype.connectToChat =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/messenger.ChatService/ConnectToChat',
      request,
      metadata || {},
      methodDescriptor_ChatService_ConnectToChat,
      callback);
};


/**
 * @param {!proto.messenger.ConnectRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.messenger.ConnectResponse>}
 *     Promise that resolves to the response
 */
proto.messenger.ChatServicePromiseClient.prototype.connectToChat =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/messenger.ChatService/ConnectToChat',
      request,
      metadata || {},
      methodDescriptor_ChatService_ConnectToChat);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.messenger.DeleteChatRequest,
 *   !proto.messenger.DeleteChatResponse>}
 */
const methodDescriptor_ChatService_DeleteChat = new grpc.web.MethodDescriptor(
  '/messenger.ChatService/DeleteChat',
  grpc.web.MethodType.UNARY,
  proto.messenger.DeleteChatRequest,
  proto.messenger.DeleteChatResponse,
  /**
   * @param {!proto.messenger.DeleteChatRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.messenger.DeleteChatResponse.deserializeBinary
);


/**
 * @param {!proto.messenger.DeleteChatRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.messenger.DeleteChatResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.DeleteChatResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.messenger.ChatServiceClient.prototype.deleteChat =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/messenger.ChatService/DeleteChat',
      request,
      metadata || {},
      methodDescriptor_ChatService_DeleteChat,
      callback);
};


/**
 * @param {!proto.messenger.DeleteChatRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.messenger.DeleteChatResponse>}
 *     Promise that resolves to the response
 */
proto.messenger.ChatServicePromiseClient.prototype.deleteChat =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/messenger.ChatService/DeleteChat',
      request,
      metadata || {},
      methodDescriptor_ChatService_DeleteChat);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.messenger.SendMessageRequest,
 *   !proto.messenger.SendMessageResponse>}
 */
const methodDescriptor_ChatService_SendMessage = new grpc.web.MethodDescriptor(
  '/messenger.ChatService/SendMessage',
  grpc.web.MethodType.UNARY,
  proto.messenger.SendMessageRequest,
  proto.messenger.SendMessageResponse,
  /**
   * @param {!proto.messenger.SendMessageRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.messenger.SendMessageResponse.deserializeBinary
);


/**
 * @param {!proto.messenger.SendMessageRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.messenger.SendMessageResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.SendMessageResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.messenger.ChatServiceClient.prototype.sendMessage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/messenger.ChatService/SendMessage',
      request,
      metadata || {},
      methodDescriptor_ChatService_SendMessage,
      callback);
};


/**
 * @param {!proto.messenger.SendMessageRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.messenger.SendMessageResponse>}
 *     Promise that resolves to the response
 */
proto.messenger.ChatServicePromiseClient.prototype.sendMessage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/messenger.ChatService/SendMessage',
      request,
      metadata || {},
      methodDescriptor_ChatService_SendMessage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.messenger.ReceiveMessagesRequest,
 *   !proto.messenger.ReceiveMessagesResponse>}
 */
const methodDescriptor_ChatService_ReceiveMessages = new grpc.web.MethodDescriptor(
  '/messenger.ChatService/ReceiveMessages',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.messenger.ReceiveMessagesRequest,
  proto.messenger.ReceiveMessagesResponse,
  /**
   * @param {!proto.messenger.ReceiveMessagesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.messenger.ReceiveMessagesResponse.deserializeBinary
);


/**
 * @param {!proto.messenger.ReceiveMessagesRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.ReceiveMessagesResponse>}
 *     The XHR Node Readable Stream
 */
proto.messenger.ChatServiceClient.prototype.receiveMessages =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/messenger.ChatService/ReceiveMessages',
      request,
      metadata || {},
      methodDescriptor_ChatService_ReceiveMessages);
};


/**
 * @param {!proto.messenger.ReceiveMessagesRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.ReceiveMessagesResponse>}
 *     The XHR Node Readable Stream
 */
proto.messenger.ChatServicePromiseClient.prototype.receiveMessages =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/messenger.ChatService/ReceiveMessages',
      request,
      metadata || {},
      methodDescriptor_ChatService_ReceiveMessages);
};


module.exports = proto.messenger;

