/**
 * @fileoverview gRPC-Web generated client stub for messenger
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.3
// source: file_service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.messenger = require('./file_service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.messenger.FileServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.messenger.FileServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.messenger.InitFileUploadRequest,
 *   !proto.messenger.InitFileUploadResponse>}
 */
const methodDescriptor_FileService_InitFileUpload = new grpc.web.MethodDescriptor(
  '/messenger.FileService/InitFileUpload',
  grpc.web.MethodType.UNARY,
  proto.messenger.InitFileUploadRequest,
  proto.messenger.InitFileUploadResponse,
  /**
   * @param {!proto.messenger.InitFileUploadRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.messenger.InitFileUploadResponse.deserializeBinary
);


/**
 * @param {!proto.messenger.InitFileUploadRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.messenger.InitFileUploadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.InitFileUploadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.messenger.FileServiceClient.prototype.initFileUpload =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/messenger.FileService/InitFileUpload',
      request,
      metadata || {},
      methodDescriptor_FileService_InitFileUpload,
      callback);
};


/**
 * @param {!proto.messenger.InitFileUploadRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.messenger.InitFileUploadResponse>}
 *     Promise that resolves to the response
 */
proto.messenger.FileServicePromiseClient.prototype.initFileUpload =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/messenger.FileService/InitFileUpload',
      request,
      metadata || {},
      methodDescriptor_FileService_InitFileUpload);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.messenger.FinalizeFileUploadRequest,
 *   !proto.messenger.FinalizeFileUploadResponse>}
 */
const methodDescriptor_FileService_FinalizeFileUpload = new grpc.web.MethodDescriptor(
  '/messenger.FileService/FinalizeFileUpload',
  grpc.web.MethodType.UNARY,
  proto.messenger.FinalizeFileUploadRequest,
  proto.messenger.FinalizeFileUploadResponse,
  /**
   * @param {!proto.messenger.FinalizeFileUploadRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.messenger.FinalizeFileUploadResponse.deserializeBinary
);


/**
 * @param {!proto.messenger.FinalizeFileUploadRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.messenger.FinalizeFileUploadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.FinalizeFileUploadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.messenger.FileServiceClient.prototype.finalizeFileUpload =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/messenger.FileService/FinalizeFileUpload',
      request,
      metadata || {},
      methodDescriptor_FileService_FinalizeFileUpload,
      callback);
};


/**
 * @param {!proto.messenger.FinalizeFileUploadRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.messenger.FinalizeFileUploadResponse>}
 *     Promise that resolves to the response
 */
proto.messenger.FileServicePromiseClient.prototype.finalizeFileUpload =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/messenger.FileService/FinalizeFileUpload',
      request,
      metadata || {},
      methodDescriptor_FileService_FinalizeFileUpload);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.messenger.GetFileInfoRequest,
 *   !proto.messenger.GetFileInfoResponse>}
 */
const methodDescriptor_FileService_GetFileInfo = new grpc.web.MethodDescriptor(
  '/messenger.FileService/GetFileInfo',
  grpc.web.MethodType.UNARY,
  proto.messenger.GetFileInfoRequest,
  proto.messenger.GetFileInfoResponse,
  /**
   * @param {!proto.messenger.GetFileInfoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.messenger.GetFileInfoResponse.deserializeBinary
);


/**
 * @param {!proto.messenger.GetFileInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.messenger.GetFileInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.GetFileInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.messenger.FileServiceClient.prototype.getFileInfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/messenger.FileService/GetFileInfo',
      request,
      metadata || {},
      methodDescriptor_FileService_GetFileInfo,
      callback);
};


/**
 * @param {!proto.messenger.GetFileInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.messenger.GetFileInfoResponse>}
 *     Promise that resolves to the response
 */
proto.messenger.FileServicePromiseClient.prototype.getFileInfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/messenger.FileService/GetFileInfo',
      request,
      metadata || {},
      methodDescriptor_FileService_GetFileInfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.messenger.DownloadFileRequest,
 *   !proto.messenger.FileChunk>}
 */
const methodDescriptor_FileService_DownloadFile = new grpc.web.MethodDescriptor(
  '/messenger.FileService/DownloadFile',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.messenger.DownloadFileRequest,
  proto.messenger.FileChunk,
  /**
   * @param {!proto.messenger.DownloadFileRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.messenger.FileChunk.deserializeBinary
);


/**
 * @param {!proto.messenger.DownloadFileRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.FileChunk>}
 *     The XHR Node Readable Stream
 */
proto.messenger.FileServiceClient.prototype.downloadFile =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/messenger.FileService/DownloadFile',
      request,
      metadata || {},
      methodDescriptor_FileService_DownloadFile);
};


/**
 * @param {!proto.messenger.DownloadFileRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.FileChunk>}
 *     The XHR Node Readable Stream
 */
proto.messenger.FileServicePromiseClient.prototype.downloadFile =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/messenger.FileService/DownloadFile',
      request,
      metadata || {},
      methodDescriptor_FileService_DownloadFile);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.messenger.GetChatFilesRequest,
 *   !proto.messenger.GetChatFilesResponse>}
 */
const methodDescriptor_FileService_GetChatFiles = new grpc.web.MethodDescriptor(
  '/messenger.FileService/GetChatFiles',
  grpc.web.MethodType.UNARY,
  proto.messenger.GetChatFilesRequest,
  proto.messenger.GetChatFilesResponse,
  /**
   * @param {!proto.messenger.GetChatFilesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.messenger.GetChatFilesResponse.deserializeBinary
);


/**
 * @param {!proto.messenger.GetChatFilesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.messenger.GetChatFilesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.GetChatFilesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.messenger.FileServiceClient.prototype.getChatFiles =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/messenger.FileService/GetChatFiles',
      request,
      metadata || {},
      methodDescriptor_FileService_GetChatFiles,
      callback);
};


/**
 * @param {!proto.messenger.GetChatFilesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.messenger.GetChatFilesResponse>}
 *     Promise that resolves to the response
 */
proto.messenger.FileServicePromiseClient.prototype.getChatFiles =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/messenger.FileService/GetChatFiles',
      request,
      metadata || {},
      methodDescriptor_FileService_GetChatFiles);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.messenger.DeleteFileRequest,
 *   !proto.messenger.DeleteFileResponse>}
 */
const methodDescriptor_FileService_DeleteFile = new grpc.web.MethodDescriptor(
  '/messenger.FileService/DeleteFile',
  grpc.web.MethodType.UNARY,
  proto.messenger.DeleteFileRequest,
  proto.messenger.DeleteFileResponse,
  /**
   * @param {!proto.messenger.DeleteFileRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.messenger.DeleteFileResponse.deserializeBinary
);


/**
 * @param {!proto.messenger.DeleteFileRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.messenger.DeleteFileResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.messenger.DeleteFileResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.messenger.FileServiceClient.prototype.deleteFile =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/messenger.FileService/DeleteFile',
      request,
      metadata || {},
      methodDescriptor_FileService_DeleteFile,
      callback);
};


/**
 * @param {!proto.messenger.DeleteFileRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.messenger.DeleteFileResponse>}
 *     Promise that resolves to the response
 */
proto.messenger.FileServicePromiseClient.prototype.deleteFile =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/messenger.FileService/DeleteFile',
      request,
      metadata || {},
      methodDescriptor_FileService_DeleteFile);
};


module.exports = proto.messenger;

